
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COLON COMMA DIVIDE DO DOT ELSE END GREATER GREATER_EQUAL IDENTIFIER IF INTEGER LESS LESS_EQUAL LPAREN MINUS NUMBER PLUS PROGRAM READ REAL RPAREN SEMICOLON THEN TIMES VAR WHILE WRITEprogram : PROGRAM IDENTIFIER SEMICOLON declaration_list compound_statement DOTdeclaration_list : declaration_list declaration \n                        | emptydeclaration : VAR variable_list COLON type SEMICOLONvariable_list : variable_list COMMA IDENTIFIER\n                     | IDENTIFIERtype : INTEGER\n          | REALcompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                    | statementstatement : assignment_statement\n                | if_statement\n                | while_statement\n                | read_statement\n                | write_statement assignment_statement : IDENTIFIER ASSIGN expressionif_statement : IF expression THEN statementwhile_statement : WHILE expression DO statementread_statement : READ IDENTIFIERwrite_statement : WRITE expressionexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n              | IDENTIFIERempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,11,],[0,-1,]),'IDENTIFIER':([2,9,10,20,21,22,23,27,28,38,41,42,43,44,45,46,],[3,19,25,33,33,35,33,19,33,50,19,33,33,33,33,19,]),'SEMICOLON':([3,12,13,14,15,16,17,18,30,31,32,33,35,36,39,40,47,48,49,51,52,53,54,55,56,],[4,27,-11,-12,-13,-14,-15,-16,-24,-27,-28,-29,-20,-21,-10,-17,57,-7,-8,-18,-22,-23,-25,-26,-19,]),'BEGIN':([4,5,6,8,57,],[-30,9,-3,-2,-4,]),'VAR':([4,5,6,8,57,],[-30,10,-3,-2,-4,]),'DOT':([7,26,],[11,-9,]),'IF':([9,27,41,46,],[20,20,20,20,]),'WHILE':([9,27,41,46,],[21,21,21,21,]),'READ':([9,27,41,46,],[22,22,22,22,]),'WRITE':([9,27,41,46,],[23,23,23,23,]),'END':([12,13,14,15,16,17,18,30,31,32,33,35,36,39,40,51,52,53,54,55,56,],[26,-11,-12,-13,-14,-15,-16,-24,-27,-28,-29,-20,-21,-10,-17,-18,-22,-23,-25,-26,-19,]),'ASSIGN':([19,],[28,]),'NUMBER':([20,21,23,28,42,43,44,45,],[32,32,32,32,32,32,32,32,]),'COLON':([24,25,50,],[37,-6,-5,]),'COMMA':([24,25,50,],[38,-6,-5,]),'THEN':([29,30,31,32,33,52,53,54,55,],[41,-24,-27,-28,-29,-22,-23,-25,-26,]),'PLUS':([29,30,31,32,33,34,36,40,52,53,54,55,],[42,-24,-27,-28,-29,42,42,42,-22,-23,-25,-26,]),'MINUS':([29,30,31,32,33,34,36,40,52,53,54,55,],[43,-24,-27,-28,-29,43,43,43,-22,-23,-25,-26,]),'DO':([30,31,32,33,34,52,53,54,55,],[-24,-27,-28,-29,46,-22,-23,-25,-26,]),'TIMES':([30,31,32,33,52,53,54,55,],[44,-27,-28,-29,44,44,-25,-26,]),'DIVIDE':([30,31,32,33,52,53,54,55,],[45,-27,-28,-29,45,45,-25,-26,]),'INTEGER':([37,],[48,]),'REAL':([37,],[49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([4,],[5,]),'empty':([4,],[6,]),'compound_statement':([5,],[7,]),'declaration':([5,],[8,]),'statement_list':([9,],[12,]),'statement':([9,27,41,46,],[13,39,51,56,]),'assignment_statement':([9,27,41,46,],[14,14,14,14,]),'if_statement':([9,27,41,46,],[15,15,15,15,]),'while_statement':([9,27,41,46,],[16,16,16,16,]),'read_statement':([9,27,41,46,],[17,17,17,17,]),'write_statement':([9,27,41,46,],[18,18,18,18,]),'variable_list':([10,],[24,]),'expression':([20,21,23,28,],[29,34,36,40,]),'term':([20,21,23,28,42,43,],[30,30,30,30,52,53,]),'factor':([20,21,23,28,42,43,44,45,],[31,31,31,31,31,31,54,55,]),'type':([37,],[47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOLON declaration_list compound_statement DOT','program',6,'p_program','parser.py',15),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',20),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list','parser.py',21),
  ('declaration -> VAR variable_list COLON type SEMICOLON','declaration',5,'p_declaration','parser.py',29),
  ('variable_list -> variable_list COMMA IDENTIFIER','variable_list',3,'p_variable_list','parser.py',37),
  ('variable_list -> IDENTIFIER','variable_list',1,'p_variable_list','parser.py',38),
  ('type -> INTEGER','type',1,'p_type','parser.py',46),
  ('type -> REAL','type',1,'p_type','parser.py',47),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',52),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',57),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',58),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',66),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',67),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',68),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',69),
  ('statement -> write_statement','statement',1,'p_statement','parser.py',70),
  ('assignment_statement -> IDENTIFIER ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',75),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',99),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',104),
  ('read_statement -> READ IDENTIFIER','read_statement',2,'p_read_statement','parser.py',109),
  ('write_statement -> WRITE expression','write_statement',2,'p_write_statement','parser.py',114),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',119),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',120),
  ('expression -> term','expression',1,'p_expression','parser.py',121),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',129),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',130),
  ('term -> factor','term',1,'p_term','parser.py',131),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',140),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',141),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',147),
]
